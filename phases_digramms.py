from pycalphad import Database, equilibrium
import pycalphad.variables as v
import numpy as np
import matplotlib.pyplot as plt
from pycalphad import Database, equilibrium, calculate, binplot
import pycalphad.variables as v
from pycalphad.plot.utils import phase_legend
import pandas as pd
import sympy

# ELEM = 'CR'
# tdb = 'CoCr-01Oik.tdb'
# tdb_object = f"./test_data/{tdb}"
# # file_name = sys.argv[-1]
# file_name = 'sigma_fcc_allibert.xls'
# path = f'./test_data/{file_name}'
# tdb_object_path = f"./test_data/{tdb}"
#
# # dict_of_elems, dict_of_phases = {} , {}
# #
# # df = pd.read_excel(path)
#
#
# tdb = Database(tdb_object)

# dict_of_elems[tdb] = list(tdb.elements)
# dict_of_phases[tdb] = list(tdb.phases.keys())
#
#
#
#
# from scipy.optimize import minimize
#
# def make_condition2(x, *args):
#     cond = {v.X('CR'): (x[0]), v.T: (args[0]), v.P: 101325, v.N: 1}
#     res = equilibrium(tdb, list(tdb.elements), list(tdb.phases.keys()), conditions=cond)
#     ans = 1-np.squeeze(res.NP.values)[0]
#     if ans <= 0.001:
#         return 100
#     return ans
#
# x0 = np.array([0.382368193604148])
# res = minimize(make_condition2, x0, options={'maxiter' : 5}, method='nelder-mead', args = [1321.34831460674]),
#
# print(res.x[0])
#
#
# # 0.3806 0.3691
# def make_condition3(x):
#     cond = {v.X('CR'): (x[0]), v.T: (1321.34831460674), v.P: 101325, v.N: 1}
#     res = equilibrium(tdb, list(tdb.elements), ['FCC_A1', 'SIGMA_OLD'], conditions=cond)
#     return np.squeeze(res.NP.values)
#
# print(make_condition3([0.3806505239844419])[0])

dict_of_elems, dict_of_phases = {}, {}
dict_of_elems2, dict_of_phases2 = {}, {}

ELEM = 'CR'
tdb = 'CoCr-01Oik.tdb'
tdb = 'new_tdb2.tdb'
tdb2 = 'CoCr-18Cac.tdb'

tdb_object = f"./test_data/{tdb}"
tdb_object2 = f"./test_data/{tdb2}"


# file_name = sys.argv[-1]
file_name = 'sigma_fcc_allibert.xls'
path = f'./test_data/{file_name}'
tdb_object_path = f"./test_data/{tdb}"
df = pd.read_excel(path)

dict_of_elems[tdb] = list(Database(tdb_object).elements)
# # dict_of_phases[tdb] = list(map(lambda x: f"{x}_18", list(Database(tdb_object).phases.keys())))
dict_of_phases[tdb] = list(Database(tdb_object).phases.keys())

tdb = Database(tdb_object)



tdb_path = Database(tdb_object)
# tdb_path2 = Database(tdb_object2)
fig = plt.figure(figsize=(13,8))
axes = fig.gca()
def make_condition(el, T):
    return {v.X(el):(0.1, 0.9, 0.01), v.T: (1150, T, 2), v.P:101325, v.N: 1}
#
cond = make_condition('CR', 1490)
binplot(tdb_path, tdb_path.elements , list(tdb_path.phases.keys()),  cond, plot_kwargs={'ax': axes, 'tielines': False})
plt.show()



# print(equilibrium(tdb, tdb.elements, tdb.phases, conditions={v.X('X_CR')v.T: (1321.348), v.P: 101325, v.N: 1}))

# для 01 модели
# dict_of_elems2[tdb2] = list(Database(tdb_object2).elements)
# # dict_of_phases2[tdb2] = list(map(lambda x: f"{x}_18", list(Database(tdb_object2).phases.keys())))
# dict_of_phases2[tdb2] = list(Database(tdb_object2).phases.keys())

# L0_1 = [7.99021775, 7.70162185, 7.95725094, 7.67255197, 8.11671931,
#        8.06704875, 8.10770796, 7.77959297, 7.83938415, 7.93268391,
#        7.74222626, 8.13187369, 7.81899729, 8.00061911, 7.69960743,
#        7.73247518, 7.82897996, 8.03076778, 7.91583504, 7.9072444 ,
#        7.88277834, 8.06046403, 8.23515758, 7.67834054, 8.06244078,
#        8.0389226 , 7.84985233, 7.80830931, 7.97166856, 7.8216918 ,
#        8.08298573, 7.78272625, 7.7886114 , 7.69094227, 7.84788269,
#        8.00885839, 7.94852213, 7.90218622, 7.80455332, 7.82888786,
#        8.08195451, 7.90761513, 7.93814025, 7.7285646 , 7.8796755 ,
#        7.95269962, 8.13357689, 7.89544166, 7.7670284 , 8.06224934,
#        8.13066674, 7.92002166, 7.87363872, 7.93008523, 7.96366632,
#        7.8395797 , 7.82874763, 7.84929186, 7.9082406 , 8.05507369,
#        7.85952343, 7.85359578, 8.03052892, 7.59277756, 8.03015755,
#        7.89599816, 7.73244817, 7.93625606, 7.84478705, 8.18170886,
#        8.19452158, 7.9293555 , 8.2571201 , 7.8640603 , 7.72816602,
#        7.83141308, 8.14933302, 7.69583584, 7.90716136, 7.9404618 ,
#        7.83783544, 8.18078101, 8.41089076, 7.98194239, 8.25870599,
#        7.77407245, 7.84846923, 7.64036743, 8.07165916, 7.77225475,
#        7.90431724, 7.89266053, 7.90027775, 7.81834663, 7.98172403,
#        8.05060783, 7.80008435, 7.69999649, 8.09257584, 7.82014966,
#        7.81901937, 7.92261335, 8.13826798, 7.526043  , 7.81637794,
#        8.15721061, 7.96804834, 7.93939283, 7.66516365, 7.91546549,
#        7.91509813, 7.91453295, 7.91084982, 7.78482376, 7.84778728,
#        8.06297003, 7.95876558, 7.99679736, 7.79216509, 7.79935014,
#        8.15218442, 7.95539746, 7.8621217 , 7.84546963, 7.90399077,
#        7.84486021, 7.93953558, 7.96176747, 7.70543974, 7.66172479,
#        7.94174977, 7.95065987, 7.68386434, 7.77068121, 7.86228476,
#        7.79243926, 7.89054526, 8.11862878, 7.91174188, 7.81433706,
#        8.01377849, 7.81917987, 7.96923206, 7.79671831, 8.19989633,
#        7.6731345 , 8.04261275, 8.14368808, 8.08348336, 7.8502919 ,
#        8.08901545, 7.83519044, 7.95021588, 8.05784837, 7.85983944,
#        7.87134117, 8.16439897, 8.01337311, 7.6833989 , 7.86854288,
#        8.00332127, 7.83921234, 8.02443233, 7.8933104 , 7.959245  ,
#        7.96020004, 7.92071906, 7.91589137, 7.60808247, 7.95209285,
#        8.01869291, 7.98597007, 8.05587817, 7.99506421, 7.8925928 ,
#        8.09621272, 7.86922347, 7.70225258, 7.76753737, 8.20386995,
#        8.0535614 , 8.01651061, 7.93239882, 8.12242544, 7.68566908,
#        7.73916517, 8.08047299, 7.76917778, 8.29260903, 7.89077625,
#        8.05531837, 8.02106656, 7.49873149, 7.848831  , 8.25491538,
#        7.99219446, 7.73895127, 8.08452269, 7.88241181, 7.70058251,
#        7.93490782, 7.7890428 , 8.10986056, 7.8345557 , 8.08204868,
#        7.93262277, 7.97979215, 8.2010816 , 8.02931583, 8.02203186,
#        7.96257686, 8.04969131, 8.05467477, 7.75487242, 7.92689627,
#        7.35561364, 8.18417884, 7.89670852, 7.89508881, 8.25076718,
#        7.94513812, 8.01255573, 7.9866629 , 7.93935913, 7.76456428,
#        8.27500948, 8.12033371, 7.7538021 , 8.17610966, 8.02350849,
#        7.79794853, 8.05394376, 7.79021884, 7.95434996, 7.84113996,
#        8.20411913, 8.04296253, 7.92309642, 7.66569018, 8.15218682,
#        8.06122421, 7.78291712, 7.6642373 , 8.04509197, 8.12769648,
#        7.78333946, 7.73452948, 7.89659926, 7.55626363, 7.6281581 ,
#        8.30494241, 8.43288226, 8.13571944, 7.74643069, 7.67644917,
#        8.07313207, 7.4906818 , 8.08596464, 7.86563131, 7.852217  ,
#        7.86360096, 7.91147835, 7.68655132, 7.86680698, 7.88404289,
#        7.92301822, 8.01884684, 7.68113491, 7.92475258, 7.95347665,
#        7.64238768, 7.84411945, 8.0776108 , 7.85769677, 7.4809997 ,
#        8.16061084, 8.03937161, 8.03718723, 7.9906228 , 7.99810015,
#        7.98837438, 7.91530256, 8.00117971, 7.80122957, 7.97272757,
#        7.54990819, 7.97860406, 7.74116041, 7.96242778, 7.84140072,
#        8.40496499, 8.13535015, 7.71086796, 7.92049192, 7.95777233,
#        8.00166374, 7.94518308, 7.77443571, 8.12083105, 7.94419982,
#        7.8706581 , 7.66894833, 7.79470985, 8.10511979, 8.07612006,
#        8.15966435, 7.93542345, 8.0342309 , 7.77199784, 8.00429111,
#        7.88047615, 7.66398501, 7.83191051, 7.66340015, 7.68803139,
#        7.69884092, 8.0889132 , 8.20832907, 7.88231334, 7.99578102,
#        8.05769752, 7.6523515 , 8.12548893, 7.80596944, 8.00507195,
#        7.84238753, 7.84688212, 8.26771509, 8.10176499, 7.93120353,
#        7.81879363, 8.11320133, 7.94933597, 7.89702579, 7.90567973,
#        7.91417894, 7.87063763, 7.98100699, 7.74717045, 7.74634041,
#        7.84722453, 7.79954085, 7.98009845, 8.0822181 , 7.59968379,
#        8.1898183 , 7.64131505, 7.61274472, 7.79840071, 7.98963393,
#        7.87897866, 7.9624488 , 7.83597626, 8.07129265, 7.66488434,
#        7.93123048, 7.95158591, 7.88708897, 7.8229831 , 8.06226563,
#        8.15762919, 7.91645771, 7.81052134, 7.78385995, 7.64819067,
#        7.8304158 , 7.60376856, 7.83706937, 7.94838339, 7.69475875,
#        8.17041356, 7.73997031, 7.82931249, 7.9588458 , 7.68700728,
#        7.85421614, 7.7507349 , 8.08693814, 7.54221822, 8.13213511,
#        7.75214745, 8.01664372, 7.84590753, 7.93059189, 7.95000435,
#        8.10222009, 7.82891436, 7.65038199, 7.6355593 , 7.60453621,
#        7.98659872, 8.02115777, 7.87813722, 8.10819929, 8.30894754,
#        8.03552519, 7.95461262, 7.93343271, 7.74784825, 8.00092752,
#        7.83347341, 7.98148297, 7.76214943, 7.89340256, 7.8066886 ,
#        8.07570904, 8.09879917, 7.60777021, 7.8050045 , 7.74360305,
#        8.47883568, 7.97143773, 8.08818067, 7.76174073, 7.95990176,
#        8.00994496, 7.84989088, 7.78490621, 8.28642395, 8.06273904,
#        7.85850982, 8.17863167, 8.02106233, 7.9801162 , 7.75161887,
#        7.71861057, 7.68059828, 7.86589574, 7.73970661, 7.97353909,
#        7.7231274 , 8.02949676, 7.77073324, 7.65057107, 7.80375443,
#        7.98245212, 7.97150922, 7.96614428, 8.05170626, 7.78903086,
#        7.91943868, 7.96805688, 7.7022303 , 7.79597503, 8.03090479,
#        8.04065819, 7.8624873 , 7.96160438, 8.14505126, 8.13178629,
#        7.87049043, 7.85892174, 7.60968265, 7.71439455, 8.16111905,
#        7.9825044 , 7.66337187, 8.00467751, 8.15420119, 7.61301083,
#        7.99577808, 7.9776464 , 8.05966609, 7.81262845, 7.7953213 ,
#        7.4261969 , 7.97855329, 7.86038207, 7.99087612, 7.95685451,
#        7.80956337, 7.69976669, 8.00767701, 7.98102012, 7.70573423,
#        8.06256602, 7.98142026, 7.85612653, 7.73719234, 7.68758236,
#        7.81415115, 8.03195919, 8.12800541, 7.71181658, 8.24227308,
#        8.02139085, 7.82730649, 7.78707291, 8.20161394, 7.92287269,
#        8.03000541, 7.91160754, 7.79328172, 7.78065815, 7.94848918,
#        7.73224706, 8.05805044, 7.67763667, 7.71731745, 7.84472764]
#
# L0_0 = [-23079.96876434, -23079.45709612, -23080.05444314, -23081.52728246,
#        -23080.93967628, -23080.37269571, -23078.99513661, -23080.19948601,
#        -23081.13958841, -23079.94005246, -23080.28236755, -23080.87121928,
#        -23080.75488994, -23081.57175157, -23079.93611873, -23079.39444775,
#        -23080.31818272, -23079.76888463, -23080.22294802, -23081.91470502,
#        -23080.53622547, -23079.98391133, -23081.83794064, -23081.18640408,
#        -23079.69072572, -23079.58680611, -23080.85223828, -23080.54142677,
#        -23079.80765972, -23080.44884579, -23081.72048525, -23080.78819999,
#        -23082.07251415, -23080.57681616, -23080.5894084 , -23079.72392944,
#        -23080.96329389, -23080.5256085 , -23080.96227806, -23080.4504805 ,
#        -23080.8710452 , -23080.41488113, -23079.75763359, -23081.7493337 ,
#        -23080.93281333, -23081.002076  , -23079.99801895, -23080.39709224,
#        -23081.91505072, -23080.47121329, -23081.03401471, -23080.53444047,
#        -23081.35746716, -23080.71400356, -23080.09555956, -23079.95395114,
#        -23081.46664392, -23080.61436041, -23079.36068225, -23078.24310534,
#        -23080.79986211, -23081.0883416 , -23079.02576098, -23081.08548477,
#        -23080.35597721, -23080.83575695, -23080.96048956, -23081.3833717 ,
#        -23080.86122358, -23080.33426996, -23079.99127606, -23080.13507536,
#        -23081.41482853, -23080.851499  , -23080.21965663, -23081.14154278,
#        -23078.49691026, -23080.972357  , -23079.81372875, -23079.97836969,
#        -23079.52106722, -23080.44510656, -23080.26793881, -23079.92878036,
#        -23079.0736435 , -23079.60166825, -23081.16974382, -23079.7810866 ,
#        -23081.36619929, -23081.44112887, -23080.44618191, -23080.35294981,
#        -23080.61919318, -23081.13183408, -23080.47381053, -23080.03000117,
#        -23080.0446893 , -23080.67269977, -23080.45935638, -23080.73924122,
#        -23080.72777656, -23081.38026349, -23081.70870123, -23079.966655  ,
#        -23079.83045664, -23081.1741886 , -23080.15553209, -23080.20742835,
#        -23080.08339651, -23081.17896099, -23082.04637387, -23080.13387754,
#        -23079.742619  , -23080.96474556, -23080.35153421, -23080.61989316,
#        -23080.20812879, -23080.20825349, -23080.87325265, -23080.38771875,
#        -23080.90957891, -23079.91686603, -23079.62354532, -23081.27366115,
#        -23081.56475077, -23081.17949094, -23080.98919864, -23079.12413425,
#        -23080.49522903, -23081.15150169, -23080.60492967, -23080.41909413,
#        -23080.41111057, -23080.30210258, -23080.81169779, -23080.5200998 ,
#        -23080.36880898, -23078.8350895 , -23080.87029147, -23081.76421754,
#        -23080.06912935, -23079.93408335, -23080.6720398 , -23081.30493704,
#        -23080.13445638, -23081.16028811, -23080.79199175, -23081.56013275,
#        -23080.50860477, -23079.94745442, -23080.44225326, -23080.40554344,
#        -23079.90767177, -23081.56762139, -23080.43028331, -23080.17738489,
#        -23080.00421079, -23080.62837408, -23081.54257299, -23080.43450464,
#        -23079.91282261, -23080.62465519, -23081.05470022, -23080.19202684,
#        -23080.76173108, -23080.54021568, -23080.76742653, -23079.25868881,
#        -23079.12958996, -23081.23519222, -23081.15712761, -23080.14948054,
#        -23080.0382516 , -23080.06179998, -23080.98723027, -23080.73091355,
#        -23080.93316275, -23079.65686515, -23080.3543194 , -23081.08907227,
#        -23080.84243033, -23080.29347807, -23080.17341086, -23081.61180769,
#        -23080.2221132 , -23080.62365803, -23080.77548255, -23079.2397704 ,
#        -23080.9882798 , -23081.32066432, -23080.70994455, -23080.20462266,
#        -23080.39638373, -23081.42438118, -23079.91375771, -23080.70691192,
#        -23080.92106343, -23080.35352229, -23080.91045652, -23080.12216924,
#        -23080.15983926, -23080.81588517, -23080.54102167, -23081.81563183,
#        -23079.92215454, -23081.41090904, -23079.50670526, -23080.09588844,
#        -23080.36363046, -23081.29196709, -23080.31783459, -23081.87243767,
#        -23080.61265935, -23079.48780573, -23081.55187992, -23079.43883831,
#        -23081.64728403, -23080.25813015, -23080.1391778 , -23081.23439757,
#        -23079.297752  , -23080.68508001, -23079.8414043 , -23080.80289647,
#        -23079.77392586, -23080.43642997, -23080.47461202, -23080.75803342,
#        -23081.44825218, -23080.49745292, -23079.75698967, -23081.92661699,
#        -23080.5851226 , -23080.81853973, -23080.1823238 , -23080.36937509,
#        -23081.72792455, -23080.16713208, -23081.05254032, -23079.77311507,
#        -23081.04497287, -23081.39329278, -23079.83973052, -23081.51420801,
#        -23080.91301244, -23080.63558067, -23080.90495001, -23078.74186244,
#        -23080.26887332, -23081.39205753, -23081.00270256, -23080.53236091,
#        -23080.21905863, -23079.50195302, -23080.26746325, -23080.29037845,
#        -23080.53069606, -23080.35267898, -23080.33036959, -23079.95925869,
#        -23080.14777995, -23079.28867338, -23079.99873829, -23080.94876012,
#        -23080.80125801, -23080.332359  , -23081.4774873 , -23080.08973519,
#        -23080.9458963 , -23080.81952271, -23080.2340695 , -23080.25156187,
#        -23080.55876305, -23080.26497045, -23081.42187649, -23080.94206636,
#        -23080.45193662, -23081.84090075, -23080.62573659, -23080.81426756,
#        -23080.06865831, -23080.71683044, -23081.16168925, -23080.09974686,
#        -23080.33435644, -23081.44856986, -23080.14633181, -23079.42253325,
#        -23081.70198368, -23080.29088741, -23080.86952756, -23079.77683304,
#        -23080.55104474, -23080.29395373, -23081.38888656, -23079.72097273,
#        -23081.03840774, -23079.74845101, -23080.05139302, -23080.95088801,
#        -23080.71503662, -23081.03647427, -23079.58928783, -23081.04332661,
#        -23081.70852881, -23079.09531397, -23079.62296738, -23080.61193181,
#        -23080.17680123, -23081.0110615 , -23080.85040245, -23079.59613723,
#        -23080.18708617, -23080.54934968, -23079.95330928, -23079.88234841,
#        -23080.42136057, -23081.17595082, -23080.45531883, -23080.35096089,
#        -23079.89525568, -23079.90820361, -23080.59195055, -23080.10369364,
#        -23080.2146708 , -23081.3365787 , -23080.35292793, -23079.96040334,
#        -23081.13699393, -23081.7365304 , -23080.96120818, -23081.4003756 ,
#        -23080.45776739, -23081.39668546, -23080.46003503, -23080.00648642,
#        -23081.2351432 , -23078.22420312, -23080.74868966, -23080.66474254,
#        -23080.80293355, -23081.34687855, -23079.82171988, -23080.6370622 ,
#        -23081.24296181, -23080.81859915, -23080.1888765 , -23081.1638871 ,
#        -23080.32466567, -23080.08507069, -23081.00175072, -23080.17655062,
#        -23081.00148526, -23080.42983962, -23080.64564459, -23080.85942882,
#        -23080.17767263, -23080.6407945 , -23080.99122862, -23080.8711146 ,
#        -23081.09371777, -23082.27070773, -23081.51775798, -23079.94256366,
#        -23079.38752624, -23080.52817083, -23080.87829732, -23081.21936597,
#        -23080.20643464, -23081.45661258, -23080.25388435, -23080.81943342,
#        -23080.96372023, -23081.57825323, -23080.34746473, -23079.87269405,
#        -23080.13855489, -23081.3419543 , -23080.85831097, -23079.82813411,
#        -23080.26064363, -23082.77472358, -23079.89618046, -23081.35947201,
#        -23081.91359966, -23081.64281219, -23081.50176149, -23080.47133026,
#        -23079.66233913, -23080.18081185, -23080.42116044, -23079.5263909 ,
#        -23079.89690399, -23080.44974732, -23081.05949591, -23080.11320213,
#        -23080.77202082, -23080.51281486, -23080.13387873, -23080.73952406,
#        -23080.17710244, -23080.67436968, -23079.88982283, -23081.49954966,
#        -23080.66399776, -23080.59811048, -23080.68158921, -23080.45705361,
#        -23081.04267823, -23079.56053125, -23081.56301401, -23080.94589053,
#        -23081.4138157 , -23080.11763928, -23081.03006445, -23079.75158406,
#        -23080.02270689, -23079.84763036, -23079.56226481, -23080.42363863,
#        -23080.08436911, -23080.50551347, -23080.57509109, -23080.4138872 ,
#        -23080.22978538, -23080.42694063, -23081.44994169, -23080.42156122,
#        -23080.8327838 , -23082.13210679, -23079.29348229, -23079.07104351,
#        -23081.61720467, -23082.07815515, -23080.83423088, -23080.26706868,
#        -23080.11737433, -23081.59350143, -23081.1805695 , -23079.48949089,
#        -23080.36218886, -23081.4696633 , -23080.06686901, -23079.64040459,
#        -23078.89708696, -23081.33963684, -23079.89858107, -23080.52597835,
#        -23080.33707307, -23080.75200381, -23079.65383341, -23078.49807681,
#        -23080.89813353, -23082.06908151, -23081.22463191, -23079.71957724,
#        -23080.46050055, -23080.20290538, -23082.30093842, -23081.93996781,
#        -23080.48242859, -23079.79062068, -23080.86414126, -23079.98700679,
#        -23079.72683444, -23081.52085533, -23080.46586962, -23079.51473176,
#        -23080.6810021 , -23080.08049786, -23080.75225707, -23080.89452342,
#        -23079.56632689, -23080.63868959, -23080.39798718, -23080.32746802,
#        -23080.97675406, -23081.32140657, -23080.80550034, -23081.34842828,
#        -23081.45773397, -23080.40302413, -23080.50890447, -23080.63295794,
#        -23079.99767127, -23080.39697585, -23082.26427867, -23080.77684961,
#        -23080.9433167 , -23079.93602311, -23081.49331787, -23082.41504662,
#        -23081.08002238, -23080.63300617, -23080.53111012, -23079.73058618,
#        -23081.19193162, -23081.34459295, -23079.48307304, -23081.10966792]

L0_0 = [-24050.78042955, -24052.47234561, -24051.19094575, -24051.00686223,
       -24052.7405506 , -24053.07560782, -24050.72257529, -24052.50710404,
       -24053.10689252, -24052.01651251, -24050.37366392, -24052.32193381,
       -24051.50425804, -24052.23904685, -24051.89827238, -24052.07424775,
       -24051.72950273, -24051.71232577, -24051.62279511, -24051.22284511,
       -24052.06833562, -24053.2023042 , -24051.3923262 , -24050.81312871,
       -24051.37588796, -24051.74292692, -24051.06914105, -24052.29253141,
       -24051.27983409, -24052.35833732, -24050.97763688, -24050.95444639,
       -24052.03436431, -24052.07447519, -24051.78507675, -24052.0807764 ,
       -24051.44485556, -24052.52597421, -24052.33286879, -24052.09019746,
       -24050.94095303, -24052.26098547, -24050.85900554, -24051.53870828,
       -24051.71145954, -24051.61676769, -24051.60285022, -24050.95255143,
       -24051.93879357, -24052.08677811, -24052.65448326, -24052.47380597,
       -24051.96366194, -24050.09767756, -24051.54601174, -24052.35470862,
       -24052.27723682, -24052.83341124, -24051.88178671, -24050.86984921,
       -24051.12872301, -24051.28789193, -24051.16681863, -24053.0982546 ,
       -24051.77224682, -24051.34610691, -24052.51990639, -24052.00464039,
       -24051.67664116, -24051.53509469, -24051.24497871, -24051.64578578,
       -24051.58583003, -24052.4155242 , -24051.73728552, -24051.97529018,
       -24051.74276324, -24052.84817868, -24051.66755271, -24051.32162548,
       -24053.0110063 , -24052.14631143, -24052.76095578, -24051.35161346,
       -24051.81474547, -24052.67976446, -24051.80404555, -24052.0300446 ,
       -24052.71300472, -24051.95467616, -24051.72634804, -24052.25275485,
       -24052.3739252 , -24052.14007361, -24053.30983443, -24050.90282149,
       -24051.97216361, -24052.37671043, -24053.04299704, -24051.59434881,
       -24051.87282481, -24052.53834323, -24052.80139667, -24052.04393943,
       -24052.15052497, -24051.12273974, -24052.37616635, -24052.2523377 ,
       -24051.01138999, -24052.58739469, -24052.63026722, -24051.38129736,
       -24052.40798075, -24051.9266999 , -24052.45214568, -24051.4080973 ,
       -24051.05562154, -24051.51221638, -24052.00202488, -24052.66488824,
       -24051.70619072, -24053.09453537, -24051.33997667, -24051.56311202,
       -24052.49052716, -24052.10324699, -24051.97420022, -24052.26062677,
       -24051.80788291, -24052.25575544, -24051.06278677, -24051.30970725,
       -24051.36397071, -24052.69329038, -24051.78239406, -24051.19127377,
       -24052.09149242, -24052.91323027, -24052.33970754, -24050.96292338,
       -24051.99290841, -24051.95185821, -24051.78348067, -24052.84516795,
       -24050.91622137, -24051.41705783, -24052.77430434, -24051.6494096 ,
       -24051.51410176, -24053.02540244, -24050.83193379, -24051.3312982 ,
       -24051.60730063, -24051.16843149, -24051.96911001, -24050.3885112 ,
       -24051.95231741, -24051.32508933, -24050.48880339, -24052.36992552,
       -24052.53954604, -24051.33111257, -24052.57893968, -24052.11350463,
       -24052.42466186, -24051.88931308, -24051.11608102, -24053.28825194,
       -24051.5721715 , -24051.67588556, -24051.23418342, -24051.58916564,
       -24050.92559629, -24051.73107735, -24051.94042697, -24051.94769138,
       -24052.08166467, -24051.13358318, -24053.11849892, -24052.09216459,
       -24051.61771593, -24052.38942142, -24050.84643416, -24051.76106477,
       -24051.50987779, -24051.81368528, -24051.53501547, -24051.50729106,
       -24052.70082071, -24051.69016547, -24053.04390015, -24051.0869529 ,
       -24049.19206193, -24051.65222539, -24051.3588909 , -24051.63121472,
       -24051.75969784, -24051.7329071 , -24052.31628817, -24052.52746621,
       -24050.60242353, -24051.31518021, -24053.57987942, -24052.40021236,
       -24051.42418552, -24052.17065341, -24051.94866035, -24051.65787374,
       -24051.4465085 , -24052.69401739, -24051.50833582, -24053.21915478,
       -24051.83464558, -24052.23043006, -24052.116046  , -24051.96476345,
       -24052.42005584, -24051.87947657, -24052.20515777, -24051.73922363,
       -24052.48393563, -24050.91658458, -24052.2666005 , -24052.24582649,
       -24052.65985015, -24052.33883504, -24051.70411966, -24051.11423023,
       -24052.47195509, -24052.04229467, -24052.24965579, -24051.30640949,
       -24052.30015592, -24052.18742885, -24052.05354592, -24051.43839409,
       -24051.12299155, -24053.64827575, -24051.88889342, -24053.00653618,
       -24051.99194558, -24051.11316843, -24050.62330933, -24050.58410707,
       -24049.88627741, -24054.20503173, -24052.79873488, -24050.77932196,
       -24052.27198401, -24051.67838301, -24051.80975557, -24052.32869479,
       -24050.02098553, -24052.52561309, -24052.52841389, -24051.75184292,
       -24050.96170521, -24052.13929695, -24053.06889692, -24052.06423277,
       -24051.01244408, -24052.46853167, -24051.65389467, -24051.28052134,
       -24051.10712649, -24052.3534238 , -24052.61560454, -24052.16118634,
       -24051.8384263 , -24052.2285766 , -24051.08039153, -24050.80809399,
       -24051.66664362, -24052.34496193, -24050.77822649, -24050.53703514,
       -24051.50132257, -24052.53747077, -24052.22686827, -24051.44756911,
       -24051.3084531 , -24053.53525135, -24052.80285514, -24052.06355635,
       -24051.13414192, -24051.28914955, -24052.01539985, -24051.49899186,
       -24051.99131773, -24051.61213722, -24053.06571393, -24052.62037114,
       -24051.55960159, -24052.85454824, -24052.46211096, -24051.24878224,
       -24052.45690372, -24051.41273986, -24051.19666406, -24052.62250082,
       -24053.08569931, -24052.1163173 , -24051.51881508, -24051.75246659,
       -24052.32050438, -24051.15249299, -24052.67387501, -24052.36443637,
       -24052.13093903, -24051.65795163, -24052.44852999, -24051.39037823,
       -24051.46758668, -24050.76810404, -24051.89034998, -24052.5937398 ,
       -24051.19072391, -24053.57655101, -24051.66162093, -24052.17308652,
       -24051.23219208, -24051.63309677, -24051.78255366, -24052.17417517,
       -24050.73010438, -24052.9441718 , -24053.16730008, -24052.76515307,
       -24052.99903716, -24052.33204848, -24051.66596633, -24051.70749024,
       -24051.25433896, -24051.9395855 , -24052.01466413, -24051.06184849,
       -24052.18757736, -24053.17610259, -24051.15776835, -24051.23371759,
       -24052.36835113, -24052.18161312, -24052.05425592, -24052.46724274,
       -24052.5709451 , -24050.83327057, -24051.44643562, -24051.56703144,
       -24051.76275   , -24051.07336133, -24052.83042689, -24050.35147814,
       -24052.35028452, -24051.34747299, -24052.60674027, -24051.56704124,
       -24051.58358916, -24052.15490814, -24052.43008864, -24051.10658885,
       -24051.53501637, -24051.90287515, -24051.33787694, -24051.85408698,
       -24052.64885081, -24052.27890589, -24051.23918651, -24052.45553549,
       -24052.00439056, -24052.15659488, -24051.79624544, -24051.04313784,
       -24051.94758229, -24051.0109303 , -24050.67294258, -24050.95232556,
       -24051.60400951, -24052.80144305, -24051.99999167, -24050.93603695,
       -24052.42709188, -24051.842377  , -24051.96472573, -24052.55489395,
       -24051.49808691, -24051.74617324, -24051.47971703, -24052.65198926,
       -24050.14071686, -24051.13883032, -24052.01864117, -24052.25312885,
       -24053.48581747, -24050.86280033, -24052.07001668, -24051.20859742,
       -24051.4744838 , -24053.3184864 , -24052.17572755, -24051.51246148,
       -24051.34121711, -24051.07683521, -24052.55437202, -24052.6442697 ,
       -24052.2406281 , -24051.55333419, -24052.18409422, -24051.65752692,
       -24051.22244311, -24052.86697674, -24051.97258509, -24051.46710836,
       -24051.9275086 , -24052.34323293, -24052.27838495, -24052.63498125,
       -24052.21641659, -24051.05030779, -24051.63616719, -24051.18820899,
       -24051.03906383, -24051.75507834, -24051.07197502, -24050.84002851,
       -24050.57283643, -24052.489275  , -24052.56545882, -24051.27773652,
       -24052.28526752, -24050.36039653, -24051.98255245, -24052.49541302,
       -24052.86848513, -24050.93682407, -24052.19944927, -24051.44385813,
       -24051.23653507, -24052.8597009 , -24051.25673885, -24050.73895861,
       -24051.23340964, -24051.48187117, -24051.8809253 , -24052.49858659,
       -24052.66519666, -24052.5733115 , -24052.14346009, -24051.72824812,
       -24051.34603686, -24052.39299736, -24052.48854624, -24052.09510142,
       -24051.56560997, -24052.48590643, -24050.58227431, -24050.98608913,
       -24052.01493381, -24052.91640671, -24052.37811788, -24051.80094022,
       -24051.47794066, -24051.97490175, -24052.48451936, -24051.79830692,
       -24052.31065466, -24052.09643348, -24052.0873749 , -24050.46561571,
       -24052.17608153, -24051.13480616, -24052.24236874, -24052.40400871,
       -24051.66141798, -24051.57853823, -24051.86522413, -24052.47637303,
       -24051.83463047, -24050.64359715, -24052.19488744, -24052.05000315,
       -24051.51760722, -24052.28027009, -24052.76946967, -24050.87177418,
       -24050.79866217, -24052.1834482 , -24051.14169621, -24051.34804195,
       -24052.1456773 , -24051.66463025, -24052.86596591, -24051.86482217,
       -24052.5062539 , -24051.20585146, -24051.17421447, -24052.36627098,
       -24051.17063141, -24051.19828977, -24050.94760937, -24051.49653288]

L0_1 = [8.54247277, 8.58477294, 8.56259801, 8.0826889 , 8.22550977,
       8.27899592, 8.67185566, 8.54494499, 8.72954165, 8.64894392,
       8.52603522, 8.40262065, 8.02941177, 8.34516298, 8.10984102,
       8.46682408, 8.11282747, 8.7200168 , 8.33566295, 8.26588042,
       8.51303953, 8.82796842, 8.50414922, 8.44337292, 8.69767899,
       8.97152898, 8.77204771, 8.20898374, 8.30795411, 8.01048878,
       8.84635545, 8.30490494, 8.08307032, 8.06698414, 8.42674337,
       8.21387272, 8.75126738, 8.64595796, 8.12680855, 8.723005  ,
       8.33013471, 8.26147466, 8.55968171, 8.13976174, 8.13075972,
       8.36040551, 8.41628837, 8.36804965, 8.47461057, 8.4689284 ,
       8.40133507, 8.39003151, 8.53254391, 8.5856479 , 8.1918347 ,
       8.78984834, 8.14923351, 8.7454488 , 8.47020954, 8.42412109,
       8.79809111, 8.41704517, 8.21373464, 8.63510932, 8.25237366,
       8.6360864 , 8.23003094, 8.19764665, 8.32151041, 8.20044639,
       8.78593881, 8.5077742 , 8.35301974, 8.77158573, 8.61980616,
       8.32032263, 8.15734635, 8.28432533, 8.57636963, 8.27623664,
       8.20788051, 8.82299181, 8.23770924, 8.04903275, 8.23597902,
       8.81832701, 8.46173657, 8.61557209, 8.25964617, 8.22299888,
       8.71849961, 8.46264378, 8.07524201, 8.44099067, 8.01876933,
       8.27940325, 8.41722037, 8.76624734, 8.53928836, 8.33821352,
       8.46808686, 8.22058233, 8.12408372, 8.25536998, 8.65548955,
       8.22660794, 8.39992309, 8.78128568, 8.45756867, 8.48611528,
       8.58150282, 8.63012705, 8.46788448, 8.10872642, 8.66208316,
       8.29787539, 8.40302275, 8.27686592, 8.69067785, 8.63253586,
       8.30331663, 8.65476806, 8.1763105 , 8.46689468, 8.44371933,
       8.1774787 , 8.10619286, 8.33147076, 8.64888918, 8.17856939,
       8.53441177, 8.26545229, 8.13357089, 8.47287609, 8.12864522,
       8.49216107, 8.98920314, 8.37550621, 8.39919358, 8.54828524,
       8.48250262, 8.42144183, 8.39410811, 8.03918411, 8.39599587,
       8.2477848 , 8.69042342, 8.55148228, 8.5539172 , 8.33742378,
       8.14628599, 8.67919652, 8.30156376, 8.44654861, 8.29575943,
       8.56987147, 8.72151677, 8.3095774 , 8.59111665, 8.32355108,
       8.38355305, 8.60089008, 8.25442566, 8.21997256, 8.13953769,
       8.23296795, 8.51191176, 8.80117689, 8.38081563, 8.57620391,
       8.58269554, 8.31867117, 8.43664823, 8.2723464 , 8.56775133,
       8.26845541, 8.46754261, 8.29233143, 9.05123192, 8.58325514,
       8.59445379, 8.66804976, 8.02323752, 8.71748847, 8.85648272,
       7.72502062, 8.17489449, 8.3038251 , 8.74770024, 8.71173159,
       8.83802393, 8.55159771, 8.47335365, 8.55917731, 8.29835478,
       8.66684105, 8.40402454, 8.54267132, 7.98408037, 8.85612505,
       8.57168329, 8.29218404, 8.13856776, 8.51901299, 8.28202126,
       8.37794228, 8.48983238, 8.6065107 , 8.45685078, 8.10274831,
       8.02668401, 8.23665993, 7.94049422, 8.26342065, 8.20098282,
       8.51334779, 8.60315075, 8.2686019 , 8.38602536, 8.2940746 ,
       8.3529723 , 8.06854744, 8.78507842, 8.2889667 , 8.62009798,
       8.35410236, 8.39047594, 8.51295288, 8.77278662, 8.36133689,
       8.34797291, 8.21281064, 8.33281086, 8.72415609, 8.43297908,
       8.46401575, 8.50818753, 8.33627655, 8.16101295, 8.56518116,
       8.80890528, 8.28209088, 8.8497852 , 8.32724649, 8.43048086,
       8.02416519, 8.62335968, 8.00969241, 7.90345452, 8.58628471,
       8.18761198, 8.22092311, 8.31325238, 8.06352904, 8.28921782,
       8.43328768, 7.87321259, 8.62635055, 8.21809463, 8.79595177,
       8.03501539, 8.4531132 , 8.42755126, 8.41217117, 8.76679475,
       8.10022784, 8.66332478, 8.21396237, 8.60949107, 8.21004382,
       8.240682  , 8.75527345, 8.12621691, 8.0691347 , 8.44064179,
       8.24976383, 8.1114374 , 8.58391782, 8.00482708, 8.31697564,
       8.62031732, 8.59376929, 7.7847875 , 8.56723829, 8.62096514,
       8.21459767, 8.67016091, 8.61404207, 8.2664782 , 8.09248701,
       8.16989271, 8.29245852, 8.31307363, 8.32951261, 8.50653276,
       8.66925962, 8.25653242, 8.61633552, 8.09422757, 8.4467018 ,
       8.33748751, 8.22192983, 8.33443013, 8.88780568, 7.96283405,
       8.55171082, 8.57273223, 8.21572753, 8.17577873, 8.12412273,
       8.42853969, 8.50233995, 8.51064787, 8.91225906, 8.31091315,
       8.74366811, 8.73991211, 8.63386375, 8.30375612, 8.69108592,
       9.0181424 , 8.47385709, 8.40693004, 8.66611179, 8.37468493,
       8.58112201, 8.49045074, 8.3954151 , 8.56673324, 8.87771257,
       8.74852948, 8.41328304, 8.371642  , 8.28323128, 8.03354233,
       8.30958535, 8.55585621, 8.3831656 , 8.33784704, 8.70394487,
       8.56771155, 8.55017909, 8.42633654, 8.42589623, 8.36457196,
       7.83495631, 8.54333689, 7.76950773, 8.36052977, 8.04105272,
       8.23721696, 8.25111214, 8.5225739 , 8.37830165, 8.16272594,
       8.79367653, 8.32380364, 8.13062855, 8.43333816, 8.60777057,
       8.35105203, 8.3571106 , 8.06403399, 8.65419818, 8.51807758,
       8.60611847, 8.91249688, 8.20199186, 8.22618712, 8.13588766,
       8.12030531, 8.76525053, 8.52508382, 8.22017103, 8.4354304 ,
       8.48601587, 8.78973398, 8.03786203, 8.10642345, 8.49788796,
       8.28217157, 8.65994769, 8.54024349, 8.28735046, 8.75558261,
       8.40186103, 8.44853669, 8.42236692, 8.12962061, 8.61104454,
       8.42071169, 8.36853807, 8.33538844, 8.69256704, 8.43643346,
       8.17046545, 8.64225207, 8.25988037, 8.6318163 , 8.75952235,
       8.47663015, 8.40204494, 8.24460756, 8.38692014, 8.2921314 ,
       8.79351506, 8.5151433 , 8.420432  , 8.45801024, 8.10329393,
       8.40099226, 8.34257077, 8.61939774, 8.47939901, 8.78733503,
       8.68433049, 8.22674061, 8.38945012, 8.15890236, 8.45135431,
       8.15073787, 8.09127996, 9.32146836, 8.29951274, 8.11950738,
       8.79438247, 8.0581564 , 8.65855948, 8.33512092, 8.83859778,
       8.26621663, 8.17723063, 8.75293592, 8.29331028, 8.45429424,
       8.41448153, 7.77978786, 8.2385328 , 8.20560868, 8.85849774,
       8.23154375, 8.5110349 , 8.44723678, 8.580771  , 8.30560584,
       8.21738629, 8.21060935, 8.25687998, 8.66004172, 8.37378145,
       8.16711163, 8.29765859, 8.63349829, 8.59913427, 8.49848536,
       8.39610965, 8.951537  , 8.26569723, 8.64940364, 8.35964238,
       8.56676951, 8.46305399, 8.72525603, 8.37679788, 8.24012511,
       8.48524043, 8.16907362, 8.69259321, 8.14708965, 8.70432283,
       8.22456618, 8.25795143, 8.27830196, 8.96604387, 8.7478882 ,
       8.66981451, 8.79067096, 8.50132547, 8.43405498, 8.4025255 ,
       8.75734328, 8.10574874, 8.38675615, 8.48166122, 8.59954524,
       8.70145821, 8.44198383, 8.39980753, 8.01354295, 8.04797537,
       8.52528747, 8.13923372, 8.3754421 , 8.5151664 , 8.60283163,
       8.81206244, 8.03018513, 8.14283882, 8.29995212, 8.37922693]


dbf = Database(tdb_object)
#
dbf_elem = dbf.elements

dbf_phase = list(dbf.phases.keys())
#
# import psutil
#
# try:
#     ram_info = psutil.virtual_memory()
#     print(f"Total: {ram_info.total / 1024 / 1024 / 1024:.2f} GB")
#     print(f"Available: {ram_info.available / 1024 / 1024 / 1024:.2f} GB")
#     print(f"Used: {ram_info.used / 1024 / 1024 / 1024:.2f} GB")
#     print(f"Percentage usage: {ram_info.percent}%")
# except FileNotFoundError:
#     print("Ram info not available on this system")
#

def make_condition(el, T):
    return {v.X(el): (0.35, 0.8, 0.05), v.T: (1200, 1450, 4), v.P: 101325, v.N: 1}
#
def make_condition2(el, T):
    return {v.X(el): (0.35, 0.5, 0.05), v.T: (1200, 1500, 1), v.P: 101325, v.N: 1}
#
# ################################
cond = make_condition('CR', 1550)
import seaborn as sns

cond2 = make_condition2('CR', 1550)
# cond2 = make_condition2('CR', 1550)
tdb_path = Database(tdb_object)
tdb_path2 = Database(tdb_object2)




# s = sns.kdeplot(L0_0, label="NUTS")
# s18 = sns.kdeplot(L0_01, label="NUTS")
# x, y  = s.lines[0].get_data()
# x18, y18  = s18.lines[1].get_data()
#
# fig, ax_main = plt.subplots(figsize=(10,6))
# ax_main.plot(x, y)
#
# ax2 = ax_main.twiny()
# ax2.plot(x18,y18)
# ax2.set_xlim(-24030, -24100)
# ax_main.set_xlim(-23075, -23085)
# # ax3 = ax_main.twinx()
# # bar3 = ax3.barh(x=x18, width=8)
#
# plt.show()
# print(L0_0)






# for i in range(1):
#        binplot(tdb_path2, tdb_path.elements, ['FCC_A1', 'SIGMA_D8B'], cond, plot_kwargs={'ax': axes, 'tielines': False},
#                eq_kwargs={'parameters': {'L0_0_FCC': -24051.865, 'L0_1_FCC': 8.427}})
#        binplot(tdb_path, tdb_path2.elements, ['FCC_A1', 'SIGMA_OLD'], cond, plot_kwargs={'ax': axes, 'tielines': False},
#                eq_kwargs={'parameters': {'L0_0_FCC': -23080.511, 'L0_1_FCC': 7.898}})
#        print(f"итерация номер {i}")
#
# for i in range(1):
#        binplot(tdb_path2, tdb_path.elements, ['FCC_A1', 'SIGMA_D8B'], cond2, plot_kwargs={'ax': axes, 'tielines': False})
#        binplot(tdb_path, tdb_path2.elements, ['FCC_A1', 'SIGMA_OLD'], cond2, plot_kwargs={'ax': axes, 'tielines': False})
#        print(f"итерация номер {i}")
# line = binplot(tdb_path, tdb_path2.elements, ['FCC_A1', 'SIGMA_OLD'], cond2, plot_kwargs={'ax': axes, 'tielines': False})


# mean_bp = binplot(tdb_path2, tdb_path2.elements, ['FCC_A1', 'SIGMA_D8B'], cond, plot_kwargs={'ax': axes, 'tielines': False},
#                eq_kwargs={'parameters': {'L0_0_FCC': -24051.84736341322, 'L0_1_FCC': 8.42440668634008}})

# cs = line.collections[0]
# data = cs.get_offsets()
# # binplot(tdb_path, dict_of_elems[tdb], ['FCC_A1', 'SIGMA_D8B'], cond2, plot_kwargs={'ax': axes, 'tielines': False})


# for phase in df.phase.unique().tolist():
#     df_f = df.loc[df.phase == phase]
#     plt.scatter(df_f['cr_conc'], df_f['T'], label=phase)

# axes.set_xlim(0.35, 0.45)
# plt.legend()
# plt.show()
# 23080.54195088072, 'L0_1_FCC': 7.912079631798297}
# 8.422935929133002   -24051.86093821256
sd01_0 = 0.6915947235032641
sd01_1 = 	0.08063545410831954

sd018_0 = 0.6889708379458763
sd018_1 = 0.09416376308479392

mean_01_0 = -23080.602793564038
mean_01_1 = 7.9044300488355335

mean_18_0 = -24051.92650466136
mean_18_1 = 8.379028123107508
####################
#графики диплома
fig = plt.figure(figsize=(13,8))
axes = fig.gca()
line = binplot(tdb_path, tdb_path2.elements, ['FCC_A1', 'SIGMA_OLD'], cond2, plot_kwargs={'ax': axes, 'tielines': False})
# mean_bp = binplot(tdb_path2, tdb_path2.elements, ['FCC_A1', 'SIGMA_D8B'], cond, plot_kwargs={'ax': axes, 'tielines': False},
#                eq_kwargs={'parameters': {'L0_0_FCC': -24051.84736341322, 'L0_1_FCC': 8.42440668634008}})
cs = line.collections[0]
data = cs.get_offsets()
mean_bp = binplot(tdb_path, tdb_path2.elements, ['FCC_A1', 'SIGMA_OLD'], cond, plot_kwargs={'ax': axes, 'tielines': False},
               eq_kwargs={'parameters': {'L0_0_FCC': mean_01_0, 'L0_1_FCC': mean_01_1}})
min_bp = binplot(tdb_path, tdb_path2.elements, ['FCC_A1', 'SIGMA_OLD'], cond, plot_kwargs={'ax': axes, 'tielines': False},
               eq_kwargs={'parameters': {'L0_0_FCC': mean_01_0 + 2*sd01_0, 'L0_1_FCC': mean_01_1 + 2*sd01_1}})
#
max_bp = binplot(tdb_path, tdb_path2.elements, ['FCC_A1', 'SIGMA_OLD'], cond, plot_kwargs={'ax': axes, 'tielines': False},
               eq_kwargs={'parameters': {'L0_0_FCC': mean_01_0 - 2*sd01_0, 'L0_1_FCC': mean_01_1 - 2 * sd01_1}})

min_bp3 = binplot(tdb_path, tdb_path2.elements, ['FCC_A1', 'SIGMA_OLD'], cond, plot_kwargs={'ax': axes, 'tielines': False},
               eq_kwargs={'parameters': {'L0_0_FCC': mean_01_0 + 3*sd01_0, 'L0_1_FCC': mean_01_1 + 3*sd01_1}})
#
max_bp3 = binplot(tdb_path, tdb_path2.elements, ['FCC_A1', 'SIGMA_OLD'], cond, plot_kwargs={'ax': axes, 'tielines': False},
               eq_kwargs={'parameters': {'L0_0_FCC': mean_01_0 - 3*sd01_0, 'L0_1_FCC': mean_01_1 - 3 * sd01_1}})
# min_bp = line.collections[0]
# data_min_bp = cs.get_offsets()
# max_bp = line.collections[0]
# data_max_bp = cs.get_offsets()
mean = mean_bp.collections[1]
data_mean_bp = mean.get_offsets()
mins= min_bp.collections[2]
data_min_bp = mins.get_offsets()
maxs= max_bp.collections[3]
data_max_bp = maxs.get_offsets()
mins3= min_bp.collections[4]
data_min_bp3 = mins3.get_offsets()
maxs3= max_bp.collections[5]
data_max_bp3 = maxs3.get_offsets()
x_mean = [d[0] for d in data_mean_bp if d[0] < 0.45][:60]
y_mean = [d[1] for d in data_mean_bp if d[0] < 0.45][:60]
print(x_mean, y_mean)
x_min = [d[0] for d in data_min_bp if d[0] < 0.45][:60]
y_min = [d[1] for d in data_min_bp if d[0] < 0.45][:60]
x_max = [d[0] for d in data_max_bp if d[0] < 0.45][:60]
y_max = [d[1] for d in data_max_bp if d[0] < 0.45][:60]
x_min3 = [d[0] for d in data_min_bp3 if d[0] < 0.45][:60]
y_min3 = [d[1] for d in data_min_bp3 if d[0] < 0.45][:60]
x_max3 = [d[0] for d in data_max_bp3 if d[0] < 0.451][:60]
y_max3 = [d[1] for d in data_max_bp3 if d[0] < 0.45][:60]

# 0.01418 , 0.00945
#  0.021          0.01423


fig = plt.figure(figsize=(12, 25))
axes = fig.gca()
x = [d[0] for d in data if d[0] < 0.5]
y = [d[1] for d in data if d[0] < 0.5]
df = df.loc[df.phase == 'fcc_a1'].values
for row in range(len(df) - 1):
    plt.scatter(df[row][0], df[row][1], color = 'green', s = 60)
plt.scatter(df[-1][0], df[-1][1], color = 'green', label = 'Опытные данные', s = 60)
plt.plot(x, y, linewidth=3.5, label = 'Граница фазового поля фазы FCC \nТДБ файла 2001 года')
plt.plot(x_mean, y_mean, linewidth=3.5 , color = "red", label = 'Граница фазового поля фазы FCC \nc аппроксимированными значениями \nпараметров')
plt.plot(x_min, y_min, color = "violet", linewidth=0.0)
plt.plot(x_max, y_max, color = "violet", linewidth=0.0)
plt.plot(x_max3, y_max3, color = "c", linewidth=0.5)
plt.plot(x_min3, y_min3, color = "c", linewidth=0.5)
axes.fill_betweenx(
        y=y_min,
        x1=x_min,
        x2=x_max,
        color="violet",
        alpha=0.2,
        label='95% Доверительный интервал'
    )

axes.fill_betweenx(
        y=y_min3,
        x1=x_min3,
        x2=x_min,
        color="c",
        alpha=0.2
    )

axes.fill_betweenx(
        y=y_min3,
        x1=x_max3,
        x2=x_max,
        color="c",
        alpha=0.2,
        label='99% Доверительный интервал'
    )
#
# axes.fill_betweenx(
#         y=y_min3,
#         x1=x_min3,
#         x2=x_max3,
#         color="blue",
#         alpha=0.2,
#         label='Доверительный интервал'
#     )

axes.set_xlim(0.35, 0.45)
axes.set_ylim(1200, 1430)
plt.legend(loc = 'lower right', borderpad=1.5, labelspacing=1.5, prop={'size':10.5} )
plt.title('Границы фазового поля фазы FCC файла термодинамической базы данных 2001 года \nсистемы Co-Cr с учетом опытных данных', pad = 12, size = 14)
plt.ylabel('Температура, К', rotation = 90, size = 14, labelpad = 8)
plt.xlabel('Концентрация элемента Cr', size = 12, labelpad = 8)
plt.show()
####################

# print(dbf_phase)

# cond = {v.X('CR'): (0.38), v.T: (), v.P: 101325, v.N: 1}
# res = equilibrium(dbf, dbf_elem, dbf_phase, conditions=cond, to_xarray=False)
# print(res.GM)


# def normal_gradients(theta, x, data, sigma):
#     """
#     Calculate the partial derivatives of a function at a set of values. The
#     derivatives are calculated using the central difference, using an iterative
#     method to check that the values converge as step size decreases.
#
#     Parameters
#     ----------
#     theta: array_like
#         A set of values, that are passed to a function, at which to calculate
#         the gradient of that function
#     x, data, sigma:
#         Observed variables as we have been using so far
#
#
#     Returns
#     -------
#     grads: array_like
#         An array of gradients for each non-fixed value.
#     """
#
#     grads = np.empty(2)
#     aux_vect = data - my_model(theta, x)  # /(2*sigma**2)
#     grads[0] = np.sum(aux_vect * x)
#     grads[1] = np.sum(aux_vect)
#
#     return grads


##################################


# cond = {v.X('CR'): (0,1,0.001), v.T: (1321.34), v.P: 101325, v.N: 1}
# res = equilibrium(dbf, dbf_elem, dbf_phase, conditions=cond, to_xarray=True, output='GM')
#
# lst = []
# x_lst  = []
# for i in range(len(np.squeeze(res.Phase))):
#     if 'FCC_A1' in np.squeeze(res.Phase)[i].values and 'SIGMA_OLD' in np.squeeze(res.Phase)[i].values:
#         lst.append(np.squeeze(res.GM.values)[i])
#         x_lst.append(np.squeeze(res.X_CR.values)[i])


cond = {v.X('CR'): (0.38236), v.T: (1321.34), v.P: 101325, v.N: 1}
# res_ex = equilibrium(dbf, dbf_elem, ['FCC_A1'], conditions=cond, to_xarray=True)
# print('Эксперимент', np.squeeze(res_ex.MU.values)[0])
#
# cond = {v.X('CR'): (0.5), v.T: (1321.34), v.P: 101325, v.N: 1}
# res = equilibrium(dbf, dbf_elem, dbf_phase, conditions=cond, to_xarray=True)
# print('Все фазы', np.squeeze(res.MU.values)[0])
##########################################
# from scipy import interpolate
#
# x = [x_lst[0], x_lst[-1]]
# y = [lst[0], lst[-1]]
# f = interpolate.interp1d(x, y, fill_value = "extrapolate")
#
# # point = calculate(dbf, dbf_elem, 'FCC_A1', P=101325, T=1321.34, output='X')
# # print(point)
#
#
# print(f(0.38236), np.squeeze(res_ex.GM))
# # # (x - x_1) / (x_2 - x1) = (y - y_1) / (y_2 - y_1)
# plt.figure(figsize=(9, 6))
# plt.plot([0.38236, x_lst[-1]], [f(0.38236), lst[-1]], color = 'red')
# plt.plot([x_lst[0], x_lst[-1]], [lst[0], lst[-1]], color = 'blue')
# plt.scatter(np.squeeze(res_ex.X_CR), np.squeeze(res_ex.GM))
# # plt.scatter(0.35, f(0.35))
# plt.legend()
# plt.show()


# plt.plot(g_total.X_SN.values.squeeze(), g_total.GM.values.squeeze(), label='GM_total')
# plt.plot(g_total.X_SN.values.squeeze(), g_w0_ex, label='g_w0_ex')
# plt.plot(g_total.X_SN.values.squeeze(), g_ex, label='g_ex')
# # plt.plot(g_total.X_SN.values.squeeze(), g_id, label='g_id')
# # plt.plot(g_total.X_SN.values.squeeze(), g_0, label='g_0')
# plt.gca().set_xlabel('x(Sn)')
# plt.gca().set_ylabel('Энергия Гиббса(G),Дж/моль')
#













########################################
#строим фазовую диаграмму
# def make_condition(el, T):
#     return {v.X(el):(0.3, 0.6, 0.005), v.T: (1150, T, 0.5), v.P:101325, v.N: 1}
# #
# cond = make_condition('CR', 1490)
# tdb_path = Database(tdb_object)
# # tdb_path2 = Database(tdb_object2)
# fig = plt.figure(figsize=(13,8))
# axes = fig.gca()
#
# binplot(dbf, dict_of_elems[tdb] , dict_of_phases[tdb],  cond, plot_kwargs={'ax': axes, 'tielines': False})
# # binplot(tdb_path2, dict_of_elems2[tdb2], dict_of_phases2[tdb2], cond, plot_kwargs={'ax': axes, 'tielines': False})
# #
# for phase in df.phase.unique().tolist():
#     df_f = df.loc[df.phase == phase]
#     plt.scatter(df_f['cr_conc'], df_f['T'], label=phase)
#
# #
# axes.set_xlim(0.3, 0.6)
# plt.legend()
# plt.show()
